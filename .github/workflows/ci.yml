name: selenium-ci

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: selenium-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  selenium-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      CHROME_VERSION: 139.0.7258.128

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # ---- CACHE (tools) ----
      - name: Cache Chrome for Testing downloads
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: tools
          key: tools-${{ runner.os }}-${{ env.CHROME_VERSION }}
          restore-keys: tools-${{ runner.os }}-

      # ---- LINUX ----
      - name: Install Chrome for Testing (Linux)
        if: startsWith(matrix.os, 'ubuntu') && steps.cache-tools.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -euxo pipefail
          VER="$CHROME_VERSION"
          BASE="https://storage.googleapis.com/chrome-for-testing-public/${VER}/linux64"
          mkdir -p tools
          curl -sSLo chrome-linux64.zip "$BASE/chrome-linux64.zip"
          curl -sSLo chromedriver-linux64.zip "$BASE/chromedriver-linux64.zip"
          unzip -q chrome-linux64.zip -d tools && rm chrome-linux64.zip
          unzip -q chromedriver-linux64.zip -d tools && rm chromedriver-linux64.zip
      - name: Configure Chrome env (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          CHROME_BIN="${GITHUB_WORKSPACE}/tools/chrome-linux64/chrome"
          DRIVER_DIR="${GITHUB_WORKSPACE}/tools/chromedriver-linux64"
          chmod +x "$CHROME_BIN" "$DRIVER_DIR/chromedriver"
          echo "CHROME_BINARY=$CHROME_BIN"   >> "$GITHUB_ENV"
          echo "CHROMEDRIVER_DIR=$DRIVER_DIR" >> "$GITHUB_ENV"

      # ---- WINDOWS ----
      - name: Install Chrome for Testing (Windows)
        if: startsWith(matrix.os, 'windows') && steps.cache-tools.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $VER  = $env:CHROME_VERSION
          $BASE = "https://storage.googleapis.com/chrome-for-testing-public/$VER/win64"
          New-Item -ItemType Directory -Force tools | Out-Null
          Invoke-WebRequest "$BASE/chrome-win64.zip" -OutFile chrome-win64.zip
          Invoke-WebRequest "$BASE/chromedriver-win64.zip" -OutFile chromedriver-win64.zip
          Expand-Archive chrome-win64.zip -DestinationPath tools -Force
          Expand-Archive chromedriver-win64.zip -DestinationPath tools -Force
          Remove-Item chrome-win64.zip, chromedriver-win64.zip -Force
      - name: Configure Chrome env (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          "CHROME_BINARY=$((Resolve-Path .\tools\chrome-win64\chrome.exe).Path)" | Out-File -FilePath $env:GITHUB_ENV -Append
          "CHROMEDRIVER_DIR=$((Resolve-Path .\tools\chromedriver-win64).Path)"   | Out-File -FilePath $env:GITHUB_ENV -Append
          $p="C:\Program Files\Google\Chrome\Application\chromedriver.exe"
          if (Test-Path $p) { Rename-Item $p "chromedriver-old.exe" -Force }

      # ---- BUILD & TEST ----
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-${{ runner.os }}-
      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Test (Linux headless via xvfb)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$GITHUB_WORKSPACE/TestResults"
          xvfb-run --auto-servernum \
            dotnet test SeleniumAutomation.Tests \
              -c Release --no-build -v n \
              --logger "trx;LogFileName=test_results.trx" \
              --results-directory "$GITHUB_WORKSPACE/TestResults"

      - name: Test (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force "$env:GITHUB_WORKSPACE\TestResults" | Out-Null
          dotnet test .\SeleniumAutomation.Tests `
            -c Release --no-build -v n `
            --logger "trx;LogFileName=test_results.trx" `
            --results-directory "$env:GITHUB_WORKSPACE\TestResults"

      # ---- ARTIFACTS ----
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          if-no-files-found: warn
          path: |
            TestResults/**/*.trx
            SeleniumAutomation.Tests/bin/**/TestResults/**/*.png
            SeleniumAutomation.Tests/bin/**/TestResults/**/*.html

      - name: Version summary
        if: always()
        shell: bash
        run: |
          echo "### Versions" >> "$GITHUB_STEP_SUMMARY"
          echo "* Chrome version: $CHROME_VERSION" >> "$GITHUB_STEP_SUMMARY"
          dotnet --info | sed -n '1,20p' >> "$GITHUB_STEP_SUMMARY"

      # ---- SUMMARY (cross-platform PowerShell) ----
      - name: Summarize results
        if: always()
        shell: pwsh
        run: |
          $summary = $env:GITHUB_STEP_SUMMARY
          "## ðŸ§ª Selenium Test Results" | Out-File -FilePath $summary -Append -Encoding utf8
          "" | Out-File -FilePath $summary -Append -Encoding utf8
          $trx = Get-ChildItem -Recurse -Filter *.trx -ErrorAction SilentlyContinue | Where-Object { $_.FullName -match 'TestResults' }
          if ($trx) {
            "### Test Log (.trx)" | Out-File -FilePath $summary -Append -Encoding utf8
            $trx | ForEach-Object { "- $($_.Name)" | Out-File -FilePath $summary -Append -Encoding utf8 }
            "" | Out-File -FilePath $summary -Append -Encoding utf8
          } else { "_No TRX file found._" | Out-File -FilePath $summary -Append -Encoding utf8 }
          $html = Get-ChildItem -Recurse -Filter *.html -ErrorAction SilentlyContinue | Where-Object { $_.FullName -match 'TestResults' }
          if ($html) {
            "### HTML snapshots" | Out-File -FilePath $summary -Append -Encoding utf8
            $html | Select-Object -First 20 | ForEach-Object { "- $($_.Name)" | Out-File -FilePath $summary -Append -Encoding utf8 }
            "" | Out-File -FilePath $summary -Append -Encoding utf8
          }
          $png = Get-ChildItem -Recurse -Filter *.png -ErrorAction SilentlyContinue | Where-Object { $_.FullName -match 'TestResults' }
          if ($png) {
            "### Screenshot count: $($png.Count) (showing first 6 inline below if step present)" | Out-File -FilePath $summary -Append -Encoding utf8
          }

      # ---- INLINE SCREENSHOTS (Linux) ----
      - name: Show screenshots in Job Summary (Linux)
        if: always() && startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "## ðŸ“¸ Screenshots"
            count=0
            while IFS= read -r -d '' img; do
              name="$(basename "$img")"
              # normalize to single-line base64
              b64="$(base64 -w0 "$img" 2>/dev/null || base64 "$img" | tr -d '\n')"
              printf '<details><summary>%s</summary><img alt="%s" src="data:image/png;base64,%s" style="max-width: 100%%; height: auto;" /></details>\n' "$name" "$name" "$b64"
              count=$((count+1))
              [ $count -ge 6 ] && break
            done < <(find SeleniumAutomation.Tests -type f -path "*/TestResults/*" -name "*.png" -print0 | sort -z)
            if [ $count -eq 0 ]; then
              echo "_No screenshots found._"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      # ---- INLINE SCREENSHOTS (Windows) ----
      - name: Show screenshots in Job Summary (Windows)
        if: always() && startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          $summary = $env:GITHUB_STEP_SUMMARY
          "# ðŸ“¸ Screenshots" | Out-File -FilePath $summary -Append -Encoding utf8
          $pngs = Get-ChildItem -Path ".\SeleniumAutomation.Tests" -Recurse -Include *.png |
                  Where-Object { $_.FullName -match "TestResults" } |
                  Sort-Object FullName | Select-Object -First 6
          if ($pngs.Count -eq 0) {
            "_No screenshots found._" | Out-File -FilePath $summary -Append -Encoding utf8
          } else {
            foreach ($img in $pngs) {
              $bytes = [IO.File]::ReadAllBytes($img.FullName)
              $b64   = [Convert]::ToBase64String($bytes)
              $name  = $img.Name
              "<details><summary>$name</summary><img src=""data:image/png;base64,$b64"" alt=""$name"" style=""max-width: 100%; height: auto;"" /></details>" | Out-File -FilePath $summary -Append -Encoding utf8
            }
          }
